---
title: "Secure Hosting Guide (Step-by-Step)"
summary: "Learn my preferred method of securely hosting web applications, it is how this security engineer hosts their websites."
publishedAt: "2025-09-17"
tag: "Cloudflare"
---

# Overview 

This guide shows you how to securely host web application with ZERO port-exposure, thanks to **Cloudflare** for their **Tunnel Connector**. Using this configuration requires minimal up-keep without the need for a reverse-proxy service, buying a SSL certificate, or worse yet Lets Encrypt. Cloudflare also lets you proxy DNS requests as well, eliminating direct exposure of your server's IP addresses. With over 20+ years experience in web hosting and 12+ yrs in hosting high-availability enterprise applications, it is how this Security Engineer hosts webapps. :)  


---

## Prerequisites
- Domain Name
- Cloudflare User Account (free account)  
- Existing web application (bound to `localhost:port`, example `http://127.0.0.1:8080`)
> Warning: Make absolutely sure that the instance is NOT configured to use "0.0.0.0" as the listening address! Using '0.0.0.0' causes the instance to accept connections from any address, including your host's internet-facing addresses. Definitely NOT what we want. Our configuration will have ZERO public port-exposure, the only acceptable listening address is "127.0.0.1".
- Server shell access. (For tunnel connector install, optional port-forwarding to local workstation to access remote application)  

---

## Step 1: Create a Free Cloudflare Account
1. Go to [https://www.cloudflare.com](https://www.cloudflare.com).  
2. Click **Start for Free**.  
3. Complete the signup (requires a card, but the free plan is 100% free). 

I have never been charged a single penny, don't let the card prompt freak you out. 

---

## Step 2: DNS Configuration
1. In the Cloudflare dashboard, select **"Add a Site"**.  
2. Select **Manually Enter DNS Records**.  
3. Set your registrar’s nameservers to the Cloudflare provided values.  

> DNS "usually" updates fairly quickly, in rare occurences it may take up-to 24 hours. You can check propagation by location using whatsmydns.net. It will query your search against location-specific DNS servers and display it's current value.   

---

## Step 3: Install and Configure Cloudflare Tunnel Connector
1. In Cloudflare, select **Zero Trust → Networks → Tunnels**.  
2. Click **Create a Tunnel** → select the **Cloudflared** option.
3. Choose a name for your tunnel (example: linode-lax-dev01). 
  - Solid naming convention if you utilize multiple hosting providers, regions, and servers.
4. Select your server’s operating system.  
5. Execute the two commands provided via shell (top, bottom-left boxes):  

   - **1. (top)**: installs Cloudflare tunnel connector.  
   - **2. (bottom-left)**: enables the tunnel upon boot.  

---

## Step 4: Web Application Configuration
1. In the tunnel settings under the tab **Published Application Routes**, select **Add a published application route**.
2. Input the following fields:
   - **Subdomain**: *(leave blank — this will be your root domain)*  
   - **Domain**: select your domain  
   - **Service**: HTTP  
   - **URL**: `localhost:your_selected_port` (example: localhost:8080)  
2. Click **Save Tunnel**.  
3. Now we configure our **www** sub-domain:  
   - **Subdomain**: `www`  
   - **Domain**: select your domain
   - **Service**: HTTP  
   - **URL**: `localhost:8080`  
4. Save.  

Congratulations, try out your newly configured application complete with SSL encryption.a    
- `https://yourdomain.com`  
- `https://www.yourdomain.com`  

Cloudflare makes hosting webapps a breeze and eliminates the dependency of a reverse-proxy service such as nginx. No more wasted time updating nginx configs and generating SSL certificates. Your application is SSL encrypted automatically.


---

## Step 5: Add More Applications (Optional)
Want multiple apps on the same server? Repeat step four adding additional published application routes. Routes can even be configured to other domains that you manage on Cloudflare.  

- `api.yourdomain.com → localhost:3000`  
- `blog.yourdomain.com → localhost:5000`  

---

## Step 6: Development Access (Optional)

In the early stages of development you will obviously want to preview your work. To accomplish this we will use SSH port-forwarding to expose our remotely hosted application to our development machine. 

```bash
ssh -R 8080:localhost:8080 username@yourserver.tld
```

Once the connection has been established, simply open your browser to http://localhost:8080

## Benefits of This Setup

- Eliminates the need for a reverse proxy service.
- Eliminates the need for paid SSL certificates and LetsEncrypt — Cloudflare provides certificates automatically
- Reduced server exposure — DNS records are proxied through Cloudflare masking your real IPv4/IPv6 address, allows you to host applications without exposing common server ports such as 80, 443.
- Easy scaling — easily add new domains and applications, just add the domain into Cloudflare DNS and create public hostnames within the tunnel settings.

Got questions? I'm happy to address any inquiries you might have on LinkedIn.
